SectionVerb {
	Value.FullySpecifiedUCM "1"

	EnableSequence [
		cdev "hw:sofhdadsp"
		cset "name='Master Playback Switch' on"
		cset "name='Master Playback Volume' 75"
		disdevall ""
	]

	DisableSequence [
	]

	If.amute {
		Condition {
			Type ControlExists
			Control "name='Auto-Mute Mode'"
		}
		True {
			EnableSequence [
				cset "name='Auto-Mute Mode' off"
			]
		}
	}
}

SectionDevice."Headphone".0 {
	Value {
		PlaybackPCM "hw:sofhdadsp,0"
		PlaybackMixerElem "Master"
		JackDev "sof-hda-dsp Headphone"
	}

	If.headphone {
		Condition {
			Type ControlExists
			Control "name='Headphone Playback Volume'"
		}
		True {
			EnableSequence [
				cset "name='Headphone Playback Volume' 60%"
			]
		}
	}

	If.headphoneswitch {
		Condition {
			Type ControlExists
			Control "name='Headphone Playback Switch'"
		}
		True {
			EnableSequence [
				cdev "hw:sofhdadsp"
				cset "name='Headphone Playback Switch' on"
			]

			DisableSequence [
				cdev "hw:sofhdadsp"
				cset "name='Headphone Playback Switch' off"
			]
		}
	}
}

SectionDevice."Speaker".0 {
	If.speakermixer {
		Condition {
			Type ControlExists
			Control "name='Speaker Playback Volume'"
		}
		True.Define {
			speakermix "Speaker"
		}
		False.Define {
			speakermix "Master"
		}
	}
	Value {
		PlaybackPCM "hw:sofhdadsp,0"
		PlaybackMixerElem "${var:speakermix}"
	}
	If.bass {
			Condition {
				Type ControlExists
				Control "name='Bass Speaker Playback Switch'"
			}
			True {
				EnableSequence [
					cdev "hw:sofhdadsp"
					cset "name='Bass Speaker Playback Switch' on"
				]

				DisableSequence [
					cdev "hw:sofhdadsp"
					cset "name='Bass Speaker Playback Switch' off"
				]
			}
	}
	If.speakerswitch {
		Condition {
			Type ControlExists
			Control "name='Speaker Playback Switch'"
		}
		True {
			EnableSequence [
				cdev "hw:sofhdadsp"
				cset "name='Speaker Playback Switch' on"
			]

			DisableSequence [
				cdev "hw:sofhdadsp"
				cset "name='Speaker Playback Switch' off"
			]
		}
	}
	If.speaker {
		Condition {
			Type ControlExists
			Control "name='Speaker Playback Volume'"
		}
		True {
			EnableSequence [
				cdev "hw:sofhdadsp"
				cset "name='Speaker Playback Volume' 60%"
			]
		}
	}
}

SectionDevice."Mic".0 {
	Value {
		CapturePCM "hw:sofhdadsp,0"
		If.capture {
			Condition {
				Type ControlExists
				Control "name='Capture'"
			}
			True {
				CaptureMixerElem "Capture"
			}
			False {
				CaptureMixerElem "Master"
			}
		}
		JackDev "sof-hda-dsp Mic"
	}
	If.captureswitch {
		Condition {
			Type ControlExists
			Control "name='Capture Switch'"
		}
		True {
			EnableSequence [
				cset "name='Capture Volume' 60%"
				cset "name='Capture Switch' on"
			]
			DisableSequence [
				cset "name='Capture Switch' off"
			]
		}
	}
	EnableSequence [
	]

	DisableSequence [
	]
}

SectionDevice."Internal Mic".0 {
	Value {
		CapturePCM "hw:sofhdadsp,6"
		CaptureMixerElem "Dmic0"
		IntrinsicSensitivity -2300
	}

	EnableSequence [
	]

	DisableSequence [
	]

}

SectionDevice."HDMI1".0 {
	Value {
		PlaybackPCM "hw:sofhdadsp,3"
		JackDev "sof-hda-dsp HDMI/DP,pcm=3"
	}

	EnableSequence [
		cset "name='IEC958 Playback Switch' on"
	]

	DisableSequence [
		cset "name='IEC958 Playback Switch' off"
	]
}

SectionDevice."HDMI2".0 {
	Value {
		PlaybackPCM "hw:sofhdadsp,4"
		JackDev "sof-hda-dsp HDMI/DP,pcm=4"
	}

	EnableSequence [
		cset "name='IEC958 Playback Switch',index=1 on"
	]

	DisableSequence [
		cset "name='IEC958 Playback Switch',index=1 off"
	]
}

SectionDevice."HDMI3".0 {
	Value {
		PlaybackPCM "hw:sofhdadsp,5"
		JackDev "sof-hda-dsp HDMI/DP,pcm=5"
	}

	EnableSequence [
		cset "name='IEC958 Playback Switch',index=2 on"
	]

	DisableSequence [
		cset "name='IEC958 Playback Switch',index=2 off"
	]
}
